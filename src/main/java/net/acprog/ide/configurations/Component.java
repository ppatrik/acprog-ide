package net.acprog.ide.configurations;

import net.acprog.builder.utils.XmlUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.util.Map;

public class Component {
    private net.acprog.builder.project.Component parentComponent;

    private int left;
    private int top;
    private int width;
    private int height;

    public Component(net.acprog.builder.project.Component parentComponent) {
        this.parentComponent = parentComponent;
    }

    public Map<String, String> getProperties() {
        return this.parentComponent.getProperties();
    }

    public Map<String, String> getEvents() {
        return this.parentComponent.getEvents();
    }

    public Map<String, String> getAutogeneratedProperties() {
        return this.parentComponent.getAutogeneratedProperties();
    }

    public String getName() {
        return this.parentComponent.getName();
    }

    public void setName(String name) {
        this.parentComponent.setName(name);
    }

    public String getType() {
        return this.parentComponent.getType();
    }

    public void setType(String type) {
        this.parentComponent.setType(type);
    }

    public String getDescription() {
        return parentComponent.getDescription();
    }

    public void setDescription(String description) {
        parentComponent.setDescription(description);
    }

    public int getLeft() {
        return left;
    }

    public void setLeft(int left) {
        this.left = left;
    }

    public int getTop() {
        return top;
    }

    public void setTop(int top) {
        this.top = top;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public void readFromXml(Element xmlElement) {
        for (Element element : XmlUtils.getChildElements(xmlElement, "property")) {
            String name = XmlUtils.getSimpleAttributeValue(element, "key", null);
            switch (name) {
                case "top":
                    setTop(Integer.parseInt(XmlUtils.getElementValue(element, "0").trim()));
                    break;
                case "left":
                    setLeft(Integer.parseInt(XmlUtils.getElementValue(element, "0").trim()));
                    break;
                case "width":
                    setWidth(Integer.parseInt(XmlUtils.getElementValue(element, "100").trim()));
                    break;
                case "height":
                    setHeight(Integer.parseInt(XmlUtils.getElementValue(element, "30").trim()));
                    break;
            }
        }
    }

    public void saveToXml(Document doc, Element xmlComponent) {
        parentComponent.writeToXml(xmlComponent);
    }

    public net.acprog.builder.project.Component getParentComponent() {
        return parentComponent;
    }

    public Element writeIdeConfiguration(Element xmlGroup) {
        Element el;
        Document doc = xmlGroup.getOwnerDocument();
        xmlGroup.setAttribute("name", getName());
        xmlGroup.setAttribute("type", "component");

        el = doc.createElement("property");
        el.setAttribute("key", "top");
        el.setTextContent(Integer.toString(getTop()));
        xmlGroup.appendChild(el);

        el = doc.createElement("property");
        el.setAttribute("key", "left");
        el.setTextContent(Integer.toString(getLeft()));
        xmlGroup.appendChild(el);

        el = doc.createElement("property");
        el.setAttribute("key", "width");
        el.setTextContent(Integer.toString(getWidth()));
        xmlGroup.appendChild(el);

        el = doc.createElement("property");
        el.setAttribute("key", "height");
        el.setTextContent(Integer.toString(getHeight()));
        xmlGroup.appendChild(el);

        return xmlGroup;
    }
}

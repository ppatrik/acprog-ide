/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/**
 * Lexical Specification
 * <p>
 * Contributors:
 * Jeanderson Barros Candido - http://jeandersonbc.github.io
 * Thiago Ferreira Patricio - http://github.com/tferreirap
 */
package net.acprog.ide.lang.cpp.generated;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>./spec-cpp/cpp.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\20\1\17\1\102\1\103\1\16\22\0\1\20\1\53\1\100" +
                    "\1\52\1\0\1\61\1\62\1\0\1\76\1\77\1\15\1\54\1\73" +
                    "\1\5\1\65\1\14\12\1\1\72\1\66\1\60\1\57\1\56\1\67" +
                    "\1\0\1\46\3\3\1\4\1\7\5\3\1\11\5\3\1\51\1\47" +
                    "\1\50\1\13\5\3\1\70\1\101\1\71\1\63\1\2\1\0\1\23" +
                    "\1\42\1\25\1\34\1\26\1\6\1\37\1\41\1\24\1\3\1\43" +
                    "\1\10\1\33\1\32\1\35\1\31\1\3\1\27\1\21\1\22\1\12" +
                    "\1\45\1\44\1\36\1\30\1\40\1\75\1\64\1\74\1\55\6\0" +
                    "\1\102\u1fa2\0\1\102\1\102\udfd6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\4\3\1\5\1\6" +
                    "\2\7\20\3\1\1\1\10\1\11\1\12\1\13\1\14" +
                    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\1\1\2\1\35\1\36\1\37\1\0\10\3\1\7" +
                    "\1\0\1\40\1\41\11\3\1\42\16\3\1\43\7\3" +
                    "\1\0\1\44\1\45\1\46\1\47\1\50\1\51\1\0" +
                    "\1\52\1\53\1\54\1\0\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\0\1\65\1\0\1\66" +
                    "\1\0\3\3\1\67\5\3\2\0\13\3\1\70\14\3" +
                    "\1\71\14\3\1\0\1\72\1\73\1\74\4\3\1\75" +
                    "\3\3\1\0\7\3\1\76\1\3\1\77\1\3\1\100" +
                    "\1\3\1\101\2\3\1\102\1\103\6\3\1\104\5\3" +
                    "\1\105\1\3\1\106\2\3\1\107\1\0\1\110\1\111" +
                    "\1\112\1\113\1\3\1\114\5\3\1\115\5\3\1\116" +
                    "\1\117\14\3\1\120\1\121\1\3\1\0\1\3\1\122" +
                    "\1\123\1\124\1\125\1\126\1\127\1\130\4\3\1\131" +
                    "\1\3\1\132\1\3\1\133\4\3\1\134\2\3\1\0" +
                    "\3\3\1\135\1\136\5\3\1\137\3\3\1\0\1\140" +
                    "\1\3\1\141\1\142\1\143\1\144\1\3\1\145\1\146" +
                    "\1\147\1\150\1\151\1\3\1\152\3\3\1\153";

    private static int[] zzUnpackAction() {
        int[] result = new int[317];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc" +
                    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\104\0\u0330\0\u0374\0\u03b8" +
                    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8" +
                    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8" +
                    "\0\104\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4" +
                    "\0\u0a18\0\104\0\104\0\104\0\104\0\u0a5c\0\104\0\104" +
                    "\0\104\0\104\0\104\0\u0aa0\0\u0ae4\0\104\0\u0b28\0\104" +
                    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48" +
                    "\0\u0d8c\0\u0dd0\0\u0e14\0\104\0\104\0\u0e58\0\u0e9c\0\u0ee0" +
                    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\314\0\u10bc" +
                    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc" +
                    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc" +
                    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\104\0\104" +
                    "\0\104\0\u16d8\0\104\0\104\0\u171c\0\u171c\0\u171c\0\u1760" +
                    "\0\u17a4\0\104\0\104\0\104\0\104\0\104\0\104\0\104" +
                    "\0\104\0\u0aa0\0\104\0\u17e8\0\104\0\u182c\0\u1870\0\u18b4" +
                    "\0\u18f8\0\314\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90" +
                    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0" +
                    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\314\0\u1e04\0\u1e48\0\u1e8c" +
                    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac" +
                    "\0\u20f0\0\314\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288" +
                    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\104" +
                    "\0\u171c\0\104\0\u24a8\0\u24ec\0\u2530\0\u2574\0\314\0\u25b8" +
                    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8" +
                    "\0\u281c\0\u2860\0\314\0\u28a4\0\314\0\u28e8\0\314\0\u292c" +
                    "\0\314\0\u2970\0\u29b4\0\314\0\314\0\u29f8\0\u2a3c\0\u2a80" +
                    "\0\u2ac4\0\u2b08\0\u2b4c\0\314\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c" +
                    "\0\u2ca0\0\314\0\u2ce4\0\314\0\u2d28\0\u2d6c\0\314\0\u2db0" +
                    "\0\314\0\314\0\314\0\314\0\u2df4\0\314\0\u2e38\0\u2e7c" +
                    "\0\u2ec0\0\u2f04\0\u2f48\0\314\0\u2f8c\0\u2fd0\0\u3014\0\u3058" +
                    "\0\u309c\0\314\0\314\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0" +
                    "\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\314" +
                    "\0\314\0\u3410\0\u3454\0\u3498\0\u34dc\0\314\0\314\0\314" +
                    "\0\314\0\314\0\314\0\u3520\0\u3564\0\u35a8\0\u35ec\0\314" +
                    "\0\u3630\0\314\0\u3674\0\314\0\u36b8\0\u36fc\0\u3740\0\u3784" +
                    "\0\314\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\314" +
                    "\0\314\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\314\0\u3ab4" +
                    "\0\u3af8\0\u3b3c\0\u3b80\0\314\0\u3bc4\0\314\0\314\0\314" +
                    "\0\314\0\u3c08\0\314\0\314\0\314\0\314\0\104\0\u3c4c" +
                    "\0\314\0\u3c90\0\u3cd4\0\u3d18\0\314";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[317];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\2\2\4\1\5\1\6\1\7\1\10" +
                    "\1\4\1\11\1\4\1\12\1\13\1\14\2\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\4\1\25" +
                    "\1\26\1\4\1\27\1\30\1\4\1\31\2\4\1\32" +
                    "\1\4\1\33\1\34\2\4\1\35\1\4\1\36\1\37" +
                    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
                    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57" +
                    "\1\60\1\61\1\62\1\63\1\64\2\2\1\15\105\0" +
                    "\1\3\6\0\4\65\71\0\4\4\1\0\6\4\5\0" +
                    "\31\4\37\0\1\66\50\0\1\67\1\70\5\0\1\71" +
                    "\17\0\4\4\1\0\2\4\1\72\3\4\5\0\2\4" +
                    "\1\73\1\74\10\4\1\75\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\25\4\1\76\3\4\33\0\4\4\1\0" +
                    "\6\4\5\0\14\4\1\77\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\100\10\4\1\101\17\4\46\0\1\102" +
                    "\1\103\41\0\1\104\103\0\1\105\43\0\1\15\65\0" +
                    "\4\4\1\0\6\4\5\0\1\4\1\106\1\4\1\107" +
                    "\14\4\1\110\2\4\1\111\5\4\33\0\4\4\1\0" +
                    "\6\4\5\0\6\4\1\112\1\113\10\4\1\114\10\4" +
                    "\33\0\4\4\1\0\2\4\1\115\1\4\1\116\1\4" +
                    "\5\0\31\4\33\0\4\4\1\0\1\117\5\4\5\0" +
                    "\11\4\1\120\17\4\33\0\4\4\1\0\2\4\1\121" +
                    "\3\4\5\0\2\4\1\122\11\4\1\123\3\4\1\124" +
                    "\10\4\33\0\4\4\1\0\2\4\1\125\3\4\5\0" +
                    "\15\4\1\126\13\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\127\23\4\33\0\4\4\1\0\4\4\1\130" +
                    "\1\4\5\0\6\4\1\131\22\4\33\0\4\4\1\0" +
                    "\4\4\1\132\1\4\5\0\5\4\1\133\6\4\1\134" +
                    "\14\4\33\0\4\4\1\0\6\4\5\0\5\4\1\135" +
                    "\6\4\1\136\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\10\4\1\137\20\4\33\0\4\4\1\0\6\4\5\0" +
                    "\14\4\1\140\14\4\33\0\4\4\1\0\6\4\5\0" +
                    "\6\4\1\141\5\4\1\142\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\20\4\1\143\10\4\33\0\4\4\1\0" +
                    "\6\4\5\0\14\4\1\144\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\30\4\1\145\56\0\1\146\136\0\1\147" +
                    "\100\0\1\150\2\0\1\151\102\0\1\152\1\153\103\0" +
                    "\1\154\24\0\56\155\1\156\1\157\1\160\17\155\1\0" +
                    "\1\161\2\155\57\0\1\162\103\0\1\163\2\0\1\164" +
                    "\100\0\1\165\103\0\1\166\4\0\1\167\34\0\1\170" +
                    "\160\0\1\171\11\0\100\172\1\173\1\174\2\172\10\0" +
                    "\4\65\105\0\1\175\153\0\1\176\17\0\4\4\1\0" +
                    "\6\4\5\0\14\4\1\177\14\4\33\0\4\4\1\0" +
                    "\2\4\1\200\3\4\5\0\31\4\33\0\4\4\1\0" +
                    "\6\4\5\0\11\4\1\201\17\4\33\0\4\4\1\0" +
                    "\6\4\5\0\6\4\1\202\22\4\33\0\4\4\1\0" +
                    "\3\4\1\203\2\4\5\0\31\4\33\0\4\4\1\0" +
                    "\6\4\5\0\11\4\1\204\17\4\33\0\4\4\1\0" +
                    "\6\4\5\0\3\4\1\205\25\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\206\2\4\1\207\25\4\32\0\16\102" +
                    "\1\14\1\15\64\102\15\210\1\211\66\210\1\0\4\4" +
                    "\1\0\6\4\5\0\2\4\1\212\3\4\1\213\22\4" +
                    "\33\0\4\4\1\0\6\4\5\0\16\4\1\214\1\215" +
                    "\11\4\33\0\4\4\1\0\6\4\5\0\14\4\1\216" +
                    "\14\4\33\0\4\4\1\0\6\4\5\0\3\4\1\217" +
                    "\25\4\33\0\4\4\1\0\4\4\1\220\1\4\5\0" +
                    "\31\4\33\0\4\4\1\0\6\4\5\0\10\4\1\221" +
                    "\20\4\33\0\4\4\1\0\6\4\5\0\3\4\1\222" +
                    "\25\4\33\0\4\4\1\0\6\4\5\0\3\4\1\223" +
                    "\25\4\33\0\4\4\1\0\6\4\5\0\1\4\1\224" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\1\4\1\225" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\2\4\1\226" +
                    "\26\4\33\0\4\4\1\0\6\4\5\0\1\227\30\4" +
                    "\33\0\4\4\1\0\6\4\5\0\11\4\1\230\17\4" +
                    "\33\0\4\4\1\0\6\4\5\0\2\4\1\231\26\4" +
                    "\33\0\4\4\1\0\6\4\5\0\1\232\30\4\33\0" +
                    "\4\4\1\0\6\4\5\0\1\4\1\233\6\4\1\234" +
                    "\20\4\33\0\4\4\1\0\6\4\5\0\1\4\1\235" +
                    "\14\4\1\236\12\4\33\0\4\4\1\0\6\4\5\0" +
                    "\21\4\1\237\7\4\33\0\4\4\1\0\6\4\5\0" +
                    "\14\4\1\240\14\4\33\0\4\4\1\0\2\4\1\241" +
                    "\3\4\5\0\31\4\33\0\4\4\1\0\6\4\5\0" +
                    "\23\4\1\242\5\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\243\23\4\33\0\4\4\1\0\1\244\5\4" +
                    "\5\0\4\4\1\245\24\4\33\0\4\4\1\0\4\4" +
                    "\1\246\1\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\247\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\250\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\251\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\14\4\1\252\14\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\253\25\4\33\0\4\4\1\0\2\4" +
                    "\1\254\3\4\5\0\3\4\1\255\25\4\33\0\4\4" +
                    "\1\0\5\4\1\256\5\0\31\4\64\0\1\257\130\0" +
                    "\1\260\24\0\56\155\1\156\21\155\1\0\1\161\60\155" +
                    "\1\156\1\261\20\155\1\0\1\161\20\155\2\0\62\155" +
                    "\2\0\16\172\2\0\62\172\67\0\1\262\17\0\4\4" +
                    "\1\0\6\4\5\0\2\4\1\263\26\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\264\30\4\33\0\4\4\1\0" +
                    "\6\4\5\0\2\4\1\265\26\4\33\0\4\4\1\0" +
                    "\6\4\5\0\26\4\1\266\2\4\33\0\4\4\1\0" +
                    "\6\4\5\0\16\4\1\267\12\4\33\0\4\4\1\0" +
                    "\6\4\5\0\11\4\1\270\17\4\33\0\4\4\1\0" +
                    "\6\4\5\0\3\4\1\271\25\4\33\0\4\4\1\0" +
                    "\6\4\5\0\14\4\1\272\14\4\32\0\15\210\1\273" +
                    "\66\210\14\0\1\15\1\211\67\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\274\27\4\33\0\4\4\1\0\4\4" +
                    "\1\275\1\4\5\0\3\4\1\276\25\4\33\0\4\4" +
                    "\1\0\6\4\5\0\11\4\1\277\17\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\300\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\6\4\1\301\22\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\4\1\302\27\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\303\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\304\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\305\30\4\33\0\4\4\1\0" +
                    "\6\4\5\0\16\4\1\306\12\4\33\0\4\4\1\0" +
                    "\6\4\5\0\14\4\1\307\14\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\310\30\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\311\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\312\1\313\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\6\4\1\314\22\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\315\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\316\23\4\33\0\4\4\1\0\2\4" +
                    "\1\317\3\4\5\0\31\4\33\0\4\4\1\0\4\4" +
                    "\1\320\1\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\321\25\4\33\0\4\4\1\0\2\4" +
                    "\1\322\3\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\323\27\4\33\0\4\4\1\0\2\4" +
                    "\1\324\3\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\15\4\1\325\13\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\326\26\4\33\0\4\4\1\0\2\4" +
                    "\1\327\3\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\21\4\1\330\7\4\33\0\4\4\1\0\6\4" +
                    "\5\0\6\4\1\331\22\4\33\0\4\4\1\0\6\4" +
                    "\5\0\14\4\1\332\14\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\333\26\4\33\0\4\4\1\0\2\4" +
                    "\1\334\3\4\5\0\31\4\33\0\4\4\1\0\2\4" +
                    "\1\335\3\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\336\26\4\33\0\4\4\1\0\6\4" +
                    "\5\0\13\4\1\337\15\4\33\0\3\4\1\303\1\0" +
                    "\6\4\5\0\31\4\57\0\1\340\57\0\4\4\1\0" +
                    "\6\4\5\0\1\4\1\341\27\4\33\0\4\4\1\0" +
                    "\6\4\5\0\5\4\1\342\23\4\33\0\4\4\1\0" +
                    "\2\4\1\343\3\4\5\0\31\4\33\0\3\4\1\342" +
                    "\1\0\6\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\16\4\1\344\12\4\33\0\4\4\1\0\6\4" +
                    "\5\0\16\4\1\345\12\4\33\0\4\4\1\0\6\4" +
                    "\5\0\11\4\1\346\17\4\32\0\14\210\1\15\1\273" +
                    "\66\210\1\0\4\4\1\0\6\4\5\0\3\4\1\347" +
                    "\25\4\33\0\4\4\1\0\6\4\5\0\4\4\1\350" +
                    "\24\4\33\0\4\4\1\0\6\4\5\0\11\4\1\351" +
                    "\17\4\33\0\4\4\1\0\6\4\5\0\5\4\1\352" +
                    "\23\4\33\0\4\4\1\0\6\4\5\0\14\4\1\353" +
                    "\14\4\33\0\4\4\1\0\6\4\5\0\1\4\1\354" +
                    "\27\4\33\0\4\4\1\0\6\4\5\0\4\4\1\355" +
                    "\24\4\33\0\4\4\1\0\6\4\5\0\3\4\1\356" +
                    "\5\4\1\357\1\4\1\360\15\4\33\0\4\4\1\0" +
                    "\6\4\5\0\11\4\1\361\17\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\362\30\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\363\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\364\25\4\33\0\4\4\1\0\6\4" +
                    "\5\0\6\4\1\365\22\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\366\25\4\33\0\4\4\1\0\6\4" +
                    "\5\0\6\4\1\367\22\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\370\30\4\33\0\4\4\1\0\6\4\5\0" +
                    "\3\4\1\371\25\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\372\23\4\33\0\4\4\1\0\6\4\5\0" +
                    "\4\4\1\373\24\4\33\0\4\4\1\0\4\4\1\374" +
                    "\1\4\5\0\31\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\375\27\4\33\0\4\4\1\0\2\4\1\376" +
                    "\3\4\5\0\31\4\33\0\4\4\1\0\6\4\5\0" +
                    "\2\4\1\377\26\4\33\0\4\4\1\0\6\4\5\0" +
                    "\22\4\1\u0100\6\4\33\0\4\4\1\0\6\4\5\0" +
                    "\5\4\1\u0101\23\4\33\0\4\4\1\0\6\4\5\0" +
                    "\1\4\1\u0102\27\4\42\0\1\u0103\74\0\4\4\1\0" +
                    "\6\4\5\0\11\4\1\u0104\17\4\33\0\4\4\1\0" +
                    "\6\4\5\0\4\4\1\u0105\24\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\4\1\u0106\27\4\33\0\4\4\1\0" +
                    "\6\4\5\0\16\4\1\u0107\12\4\33\0\4\4\1\0" +
                    "\6\4\5\0\13\4\1\u0108\15\4\33\0\4\4\1\0" +
                    "\1\u0109\5\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\20\4\1\u010a\10\4\33\0\4\4\1\0\6\4" +
                    "\5\0\13\4\1\u010b\15\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\u010c\26\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\u010d\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\2\4\1\u010e\26\4\33\0\4\4\1\0\6\4" +
                    "\5\0\11\4\1\u010f\17\4\33\0\4\4\1\0\6\4" +
                    "\5\0\11\4\1\u0110\17\4\33\0\4\4\1\0\6\4" +
                    "\5\0\4\4\1\u0111\24\4\33\0\4\4\1\0\6\4" +
                    "\5\0\11\4\1\u0112\17\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\u0113\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\4\4\1\u0114\24\4\33\0\4\4\1\0\6\4" +
                    "\5\0\4\4\1\u0115\24\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\u0116\23\4\33\0\4\4\1\0\2\4" +
                    "\1\u0117\3\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\7\4\1\u0118\21\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\u0119\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\u011a\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\u011b\25\4\44\0\1\u011c\72\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u011d\23\4\33\0\1\4" +
                    "\1\u011e\2\4\1\0\6\4\5\0\31\4\33\0\4\4" +
                    "\1\0\6\4\5\0\12\4\1\u011f\16\4\33\0\4\4" +
                    "\1\0\1\u0120\5\4\5\0\31\4\33\0\4\4\1\0" +
                    "\6\4\5\0\1\u0121\30\4\33\0\4\4\1\0\4\4" +
                    "\1\u0122\1\4\5\0\31\4\33\0\4\4\1\0\6\4" +
                    "\5\0\3\4\1\u0123\25\4\33\0\4\4\1\0\6\4" +
                    "\5\0\5\4\1\u0124\23\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\u0125\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\10\4\1\u0126\20\4\33\0\4\4\1\0\6\4" +
                    "\5\0\1\4\1\u0127\27\4\33\0\4\4\1\0\6\4" +
                    "\5\0\10\4\1\u0128\20\4\33\0\4\4\1\0\6\4" +
                    "\5\0\14\4\1\u0129\14\4\33\0\4\4\1\0\2\4" +
                    "\1\u012a\3\4\5\0\31\4\66\0\1\u012b\50\0\4\4" +
                    "\1\0\6\4\5\0\13\4\1\u012c\15\4\33\0\4\4" +
                    "\1\0\6\4\5\0\2\4\1\u012d\26\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u012e\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u012f\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\4\1\u0130\27\4\33\0\4\4" +
                    "\1\0\6\4\5\0\6\4\1\u0131\22\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u0132\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\4\1\u0133\27\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u0134\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\6\4\1\u0135\22\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u0136\23\4\60\0\1\u0137" +
                    "\56\0\4\4\1\0\6\4\5\0\1\u0138\30\4\33\0" +
                    "\4\4\1\0\6\4\5\0\13\4\1\u0139\15\4\33\0" +
                    "\4\4\1\0\6\4\5\0\1\u013a\30\4\33\0\4\4" +
                    "\1\0\6\4\5\0\5\4\1\u013b\23\4\33\0\4\4" +
                    "\1\0\6\4\5\0\6\4\1\u013c\22\4\33\0\4\4" +
                    "\1\0\6\4\5\0\1\4\1\u013d\27\4\32\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[15708];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\12\1\1\11\23\1\1\11\10\1\4\11" +
                    "\1\1\5\11\2\1\1\11\1\1\1\11\1\0\11\1" +
                    "\1\0\2\11\40\1\1\0\3\11\1\1\2\11\1\0" +
                    "\3\1\1\0\10\11\1\0\1\11\1\0\1\11\1\0" +
                    "\11\1\2\0\45\1\1\0\1\11\1\1\1\11\10\1" +
                    "\1\0\44\1\1\0\42\1\1\0\30\1\1\0\16\1" +
                    "\1\0\13\1\1\11\6\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[317];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */

    ComplexSymbolFactory symbolFactory;

    public Lexer(java.io.Reader in, ComplexSymbolFactory sf) {
        this(in);
        symbolFactory = sf;
    }

    private Symbol symbol(int sym) {
        return symbolFactory.newSymbol("sym", sym, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + yylength(), yychar + yylength()));
    }

    private Symbol symbol(int sym, Object val) {
        Location left = new Location(yyline + 1, yycolumn + 1, yychar);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol("sym", sym, left, right, val);
    }

    private Symbol symbol(int sym, Object val, int buflength) {
        Location left = new Location(yyline + 1, yycolumn + yylength() - buflength, yychar + yylength() - buflength);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol("sym", sym, left, right, val);
    }

    /**
     * Reports an error occured in a given line.
     * @param line The bad line
     * @param msg Additional information about the error
     */
    private void reportError(int line, String msg) {
        System.err.println("Lexical error at line #" + line + ": " + msg);
        //throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
    }

    public String current_lexeme() {
        int l = yyline + 1;
        int c = yycolumn + 1;
        return "line: " + l + ", column: " + c + ", with : '" + yytext() + "')";
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 170) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    reportError(yyline + 1, "Illegal character \"" + yytext() + "\"");
                }
                case 108:
                    break;
                case 2: {
                    return symbol(sym.INTEGER, new String(yytext()));
                }
                case 109:
                    break;
                case 3: {
                    return symbol(sym.IDENTIFIER, new String(yytext()));
                }
                case 110:
                    break;
                case 4: {
                    return symbol(sym.MINUSOP);
                }
                case 111:
                    break;
                case 5: {
                    return symbol(sym.DIVOP);
                }
                case 112:
                    break;
                case 6: {
                    return symbol(sym.STAR);
                }
                case 113:
                    break;
                case 7: { /* skip it */
                }
                case 114:
                    break;
                case 8: {
                    return symbol(sym.LOGNEGATION);
                }
                case 115:
                    break;
                case 9: {
                    return symbol(sym.PLUSOP);
                }
                case 116:
                    break;
                case 10: {
                    return symbol(sym.BINNEG);
                }
                case 117:
                    break;
                case 11: {
                    return symbol(sym.GT, new String(yytext()));
                }
                case 118:
                    break;
                case 12: {
                    return symbol(sym.ASSIGNMENT, new String(yytext()));
                }
                case 119:
                    break;
                case 13: {
                    return symbol(sym.LT, new String(yytext()));
                }
                case 120:
                    break;
                case 14: {
                    return symbol(sym.MODOP);
                }
                case 121:
                    break;
                case 15: {
                    return symbol(sym.SINGLEAND);
                }
                case 122:
                    break;
                case 16: {
                    return symbol(sym.XOROP, new String(yytext()));
                }
                case 123:
                    break;
                case 17: {
                    return symbol(sym.SOROP, new String(yytext()));
                }
                case 124:
                    break;
                case 18: {
                    return symbol(sym.DOT, new String(yytext()));
                }
                case 125:
                    break;
                case 19: {
                    return symbol(sym.SEMICOLON, new String(yytext()));
                }
                case 126:
                    break;
                case 20: {
                    return symbol(sym.QUESTION);
                }
                case 127:
                    break;
                case 21: {
                    return symbol(sym.LSQRBRK);
                }
                case 128:
                    break;
                case 22: {
                    return symbol(sym.RSQRBRK);
                }
                case 129:
                    break;
                case 23: {
                    return symbol(sym.COLON);
                }
                case 130:
                    break;
                case 24: {
                    return symbol(sym.COMMA);
                }
                case 131:
                    break;
                case 25: {
                    return symbol(sym.RBRK, new String(yytext()));
                }
                case 132:
                    break;
                case 26: {
                    return symbol(sym.LBRK, new String(yytext()));
                }
                case 133:
                    break;
                case 27: {
                    return symbol(sym.LPAR, new String(yytext()));
                }
                case 134:
                    break;
                case 28: {
                    return symbol(sym.RPAR, new String(yytext()));
                }
                case 135:
                    break;
                case 29: {
                    return symbol(sym.AUTODECRM);
                }
                case 136:
                    break;
                case 30: {
                    return symbol(sym.ARROW);
                }
                case 137:
                    break;
                case 31: {
                    return symbol(sym.MINUSASSIGN, new String(yytext()));
                }
                case 138:
                    break;
                case 32: {
                    return symbol(sym.DIVASSIGN);
                }
                case 139:
                    break;
                case 33: {
                    return symbol(sym.MULTASSIGN);
                }
                case 140:
                    break;
                case 34: {
                    return symbol(sym.IF, new String(yytext()));
                }
                case 141:
                    break;
                case 35: {
                    return symbol(sym.DO, new String(yytext()));
                }
                case 142:
                    break;
                case 36: {
                    return symbol(sym.NEQOP, new String(yytext()));
                }
                case 143:
                    break;
                case 37: {
                    return symbol(sym.AUTOINCRM);
                }
                case 144:
                    break;
                case 38: {
                    return symbol(sym.PLUSASSIGN, new String(yytext()));
                }
                case 145:
                    break;
                case 39: {
                    return symbol(sym.RSHIFT);
                }
                case 146:
                    break;
                case 40: {
                    return symbol(sym.GTE, new String(yytext()));
                }
                case 147:
                    break;
                case 41: {
                    return symbol(sym.EQOP, new String(yytext()));
                }
                case 148:
                    break;
                case 42: {
                    return symbol(sym.INCLUDE_LITERAL, new String(yytext()));
                }
                case 149:
                    break;
                case 43: {
                    return symbol(sym.LTE, new String(yytext()));
                }
                case 150:
                    break;
                case 44: {
                    return symbol(sym.LSHIFT);
                }
                case 151:
                    break;
                case 45: {
                    return symbol(sym.MODASSIGN);
                }
                case 152:
                    break;
                case 46: {
                    return symbol(sym.ANDASSIGN);
                }
                case 153:
                    break;
                case 47: {
                    return symbol(sym.DOUBLEAND);
                }
                case 154:
                    break;
                case 48: {
                    return symbol(sym.XORASSIGN);
                }
                case 155:
                    break;
                case 49: {
                    return symbol(sym.ORASSIGN);
                }
                case 156:
                    break;
                case 50: {
                    return symbol(sym.OROP, new String(yytext()));
                }
                case 157:
                    break;
                case 51: {
                    return symbol(sym.DOTSTAR);
                }
                case 158:
                    break;
                case 52: {
                    return symbol(sym.SEPPTR);
                }
                case 159:
                    break;
                case 53: {
                    return symbol(sym.STRING_LITERAL, new String(yytext()));
                }
                case 160:
                    break;
                case 54: {
                    return symbol(sym.ARROWSTAR);
                }
                case 161:
                    break;
                case 55: {
                    return symbol(sym.FOR, new String(yytext()));
                }
                case 162:
                    break;
                case 56: {
                    return symbol(sym.INT, new String(yytext()));
                }
                case 163:
                    break;
                case 57: {
                    return symbol(sym.NEW, new String(yytext()));
                }
                case 164:
                    break;
                case 58: {
                    return symbol(sym.RSHIFTASSIGN, new String(yytext()));
                }
                case 165:
                    break;
                case 59: {
                    return symbol(sym.LSHIFTASSIGN, new String(yytext()));
                }
                case 166:
                    break;
                case 60: {
                    return symbol(sym.DOTS);
                }
                case 167:
                    break;
                case 61: {
                    return symbol(sym.LONG, new String(yytext()));
                }
                case 168:
                    break;
                case 62: {
                    return symbol(sym.TRUE, new String(yytext()));
                }
                case 169:
                    break;
                case 63: {
                    return symbol(sym.THIS);
                }
                case 170:
                    break;
                case 64: {
                    return symbol(sym.AUTO, new String(yytext()));
                }
                case 171:
                    break;
                case 65: {
                    return symbol(sym.CASE, new String(yytext()));
                }
                case 172:
                    break;
                case 66: {
                    return symbol(sym.CHAR, new String(yytext()));
                }
                case 173:
                    break;
                case 67: {
                    return symbol(sym.ELSE, new String(yytext()));
                }
                case 174:
                    break;
                case 68: {
                    return symbol(sym.NULLPTR);
                }
                case 175:
                    break;
                case 69: {
                    return symbol(sym.GOTO, new String(yytext()));
                }
                case 176:
                    break;
                case 70: {
                    return symbol(sym.BOOL, new String(yytext()));
                }
                case 177:
                    break;
                case 71: {
                    return symbol(sym.VOID, new String(yytext()));
                }
                case 178:
                    break;
                case 72: {
                    return symbol(sym.FLOAT, new String(yytext()));
                }
                case 179:
                    break;
                case 73: {
                    return symbol(sym.FALSE, new String(yytext()));
                }
                case 180:
                    break;
                case 74: {
                    return symbol(sym.FINAL);
                }
                case 181:
                    break;
                case 75: {
                    return symbol(sym.USING);
                }
                case 182:
                    break;
                case 76: {
                    return symbol(sym.UNION);
                }
                case 183:
                    break;
                case 77: {
                    return symbol(sym.SHORT, new String(yytext()));
                }
                case 184:
                    break;
                case 78: {
                    return symbol(sym.CLASS);
                }
                case 185:
                    break;
                case 79: {
                    return symbol(sym.CONST);
                }
                case 186:
                    break;
                case 80: {
                    return symbol(sym.BREAK, new String(yytext()));
                }
                case 187:
                    break;
                case 81: {
                    return symbol(sym.WHILE, new String(yytext()));
                }
                case 188:
                    break;
                case 82: {
                    return symbol(sym.STATIC, new String(yytext()));
                }
                case 189:
                    break;
                case 83: {
                    return symbol(sym.STRUCT);
                }
                case 190:
                    break;
                case 84: {
                    return symbol(sym.STRING, new String(yytext()));
                }
                case 191:
                    break;
                case 85: {
                    return symbol(sym.SIGNED, new String(yytext()));
                }
                case 192:
                    break;
                case 86: {
                    return symbol(sym.SIZEOF);
                }
                case 193:
                    break;
                case 87: {
                    return symbol(sym.SWITCH, new String(yytext()));
                }
                case 194:
                    break;
                case 88: {
                    return symbol(sym.TYPEID);
                }
                case 195:
                    break;
                case 89: {
                    return symbol(sym.EXTERN);
                }
                case 196:
                    break;
                case 90: {
                    return symbol(sym.RETURN, new String(yytext()));
                }
                case 197:
                    break;
                case 91: {
                    return symbol(sym.PUBLIC);
                }
                case 198:
                    break;
                case 92: {
                    return symbol(sym.DOUBLE, new String(yytext()));
                }
                case 199:
                    break;
                case 93: {
                    return symbol(sym.TYPEDEF, new String(yytext()));
                }
                case 200:
                    break;
                case 94: {
                    return symbol(sym.ALIGNAS);
                }
                case 201:
                    break;
                case 95: {
                    return symbol(sym.DEFAULT);
                }
                case 202:
                    break;
                case 96: {
                    return symbol(sym.UNSIGNED, new String(yytext()));
                }
                case 203:
                    break;
                case 97: {
                    return symbol(sym.TYPENAME);
                }
                case 204:
                    break;
                case 98: {
                    return symbol(sym.CONTINUE, new String(yytext()));
                }
                case 205:
                    break;
                case 99: {
                    return symbol(sym.EXPLICIT);
                }
                case 206:
                    break;
                case 100: {
                    return symbol(sym.REGISTER, new String(yytext()));
                }
                case 207:
                    break;
                case 101: {
                    return symbol(sym.NOEXCEPT);
                }
                case 208:
                    break;
                case 102: {
                    return symbol(sym.DECLTYPE);
                }
                case 209:
                    break;
                case 103: {
                    return symbol(sym.OPERATOR, new String(yytext()));
                }
                case 210:
                    break;
                case 104: {
                    return symbol(sym.VOLATILE);
                }
                case 211:
                    break;
                case 105: {
                    return symbol(sym.INCLUDE);
                }
                case 212:
                    break;
                case 106: {
                    return symbol(sym.PROTECTED);
                }
                case 213:
                    break;
                case 107: {
                    return symbol(sym.STATIC_ASSERT);
                }
                case 214:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        {
                            return symbolFactory.newSymbol("EOF", sym.EOF, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + 1, yychar + 1));
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
